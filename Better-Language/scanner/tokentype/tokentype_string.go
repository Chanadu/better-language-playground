// Code generated by "stringer -type=TokenType"; DO NOT EDIT.

package tokentype

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Base-0]
	_ = x[OpeningParentheses-1]
	_ = x[ClosingParentheses-2]
	_ = x[OpeningCurlyBrace-3]
	_ = x[ClosingCurlyBrace-4]
	_ = x[Comma-5]
	_ = x[Dot-6]
	_ = x[Semicolon-7]
	_ = x[Minus-8]
	_ = x[Plus-9]
	_ = x[Star-10]
	_ = x[Percent-11]
	_ = x[Slash-12]
	_ = x[NotEqual-13]
	_ = x[Not-14]
	_ = x[EqualEqual-15]
	_ = x[Equal-16]
	_ = x[GreaterEqual-17]
	_ = x[Greater-18]
	_ = x[LessEqual-19]
	_ = x[Less-20]
	_ = x[Or-21]
	_ = x[And-22]
	_ = x[BitwiseLeftShift-23]
	_ = x[BitwiseRightShift-24]
	_ = x[BitwiseAND-25]
	_ = x[BitwiseOR-26]
	_ = x[BitwiseXOR-27]
	_ = x[BitwiseNOT-28]
	_ = x[Identifier-29]
	_ = x[String-30]
	_ = x[Integer-31]
	_ = x[Double-32]
	_ = x[False-33]
	_ = x[True-34]
	_ = x[If-35]
	_ = x[Else-36]
	_ = x[For-37]
	_ = x[While-38]
	_ = x[Break-39]
	_ = x[Return-40]
	_ = x[Continue-41]
	_ = x[Function-42]
	_ = x[Print-43]
	_ = x[Var-44]
	_ = x[Null-45]
	_ = x[EndOfFile-46]
	_ = x[QuestionMark-47]
	_ = x[Colon-48]
}

const _TokenType_name = "BaseOpeningParenthesesClosingParenthesesOpeningCurlyBraceClosingCurlyBraceCommaDotSemicolonMinusPlusStarPercentSlashNotEqualNotEqualEqualEqualGreaterEqualGreaterLessEqualLessOrAndBitwiseLeftShiftBitwiseRightShiftBitwiseANDBitwiseORBitwiseXORBitwiseNOTIdentifierStringIntegerDoubleFalseTrueIfElseForWhileBreakReturnContinueFunctionPrintVarNullEndOfFileQuestionMarkColon"

var _TokenType_index = [...]uint16{0, 4, 22, 40, 57, 74, 79, 82, 91, 96, 100, 104, 111, 116, 124, 127, 137, 142, 154, 161, 170, 174, 176, 179, 195, 212, 222, 231, 241, 251, 261, 267, 274, 280, 285, 289, 291, 295, 298, 303, 308, 314, 322, 330, 335, 338, 342, 351, 363, 368}

func (i TokenType) String() string {
	if i < 0 || i >= TokenType(len(_TokenType_index)-1) {
		return "TokenType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _TokenType_name[_TokenType_index[i]:_TokenType_index[i+1]]
}
